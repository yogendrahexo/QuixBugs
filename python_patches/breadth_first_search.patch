--- python_programs/breadth_first_search.py
+++ correct_python_programs/breadth_first_search.py
@@ -8,7 +8,29 @@
     nodesseen = set()
     nodesseen.add(startnode)
 
-    while True:
+    while queue:
+        node = queue.popleft()
+
+        if node is goalnode:
+            return True
+        else:
+            queue.extend(node for node in node.successors if node not in nodesseen)
+            nodesseen.update(node.successors)
+
+    return False
+
+
+"""
+from collections import deque as Queue
+
+def breadth_first_search(startnode, goalnode):
+    queue = Queue()
+    queue.append(startnode)
+
+    nodesseen = set()
+    nodesseen.add(startnode)
+
+    while len(queue):
         node = queue.popleft()
 
         if node is goalnode:
@@ -21,14 +43,46 @@
 
 
 
-"""
-Breadth-First Search
+from collections import deque as Queue
+
+def breadth_first_search(startnode, goalnode):
+    queue = Queue()
+    queue.append(startnode)
+
+    nodesseen = set()
+    nodesseen.add(startnode)
+
+    while len(queue) > 0:
+        node = queue.popleft()
+
+        if node is goalnode:
+            return True
+        else:
+            queue.extend(node for node in node.successors if node not in nodesseen)
+            nodesseen.update(node.successors)
+
+    return False
 
 
-Input:
-    startnode: A digraph node
-    goalnode: A digraph node
 
-Output:
-    Whether goalnode is reachable from startnode
+from collections import deque as Queue
+
+def breadth_first_search(startnode, goalnode):
+    queue = Queue()
+    queue.append(startnode)
+
+    nodesseen = set()
+    nodesseen.add(startnode)
+
+    while len(queue) != 0:
+        node = queue.popleft()
+
+        if node is goalnode:
+            return True
+        else:
+            queue.extend(node for node in node.successors if node not in nodesseen)
+            nodesseen.update(node.successors)
+
+    return False
+
 """
